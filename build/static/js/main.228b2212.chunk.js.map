{"version":3,"sources":["components/header.js","components/input.js","views/Home.js","views/Result.js","routes/main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Input","props","label","name","id","placeholder","onChange","type","App","useState","options","setOptions","handleChange","e","target","value","inputs","map","input","index","key","onClick","push","pathname","state","Result","location","items","selectedItem","obj","keys","Object","length","Math","random","randomProperty","option","document","reload","Main","exact","path","component","Home","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.228b2212.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./component.css\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Header() {\n  return (\n    <div className=\"container\">\n      <Link to=\"/\" className=\"header-link\">\n        <h1 className=\"header-text\">LEARNABLE TASK</h1>\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./component.css\";\n\nexport default function Input(props) {\n  const { label, name, id, placeholder, onChange } = props;\n\n  return (\n    <div className=\"input-container\">\n      <h2 className=\"input-label\">{label}</h2>\n      <input\n        type=\"text\"\n        name={name}\n        id={id}\n        placeholder={placeholder}\n        className=\"input\"\n        onChange={onChange}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport Header from \"../components/header\";\nimport Input from \"../components/input\";\n\nimport \"../App.css\";\nimport { Link } from \"react-router-dom\";\n\nexport default function App() {\n  const [options, setOptions] = useState([]);\n  const handleChange = (e) => {\n    setOptions({ ...options, [e.target.name]: e.target.value });\n  };\n  const inputs = [\"A\", \"B\", \"C\"];\n\n  return (\n    <div>\n      <Header />\n      <div className=\"body\">\n        <Input\n          label=\"Question\"\n          name=\"Question\"\n          placeholder=\"Q: Enter your question here\"\n          id=\"Question\"\n        />\n        <h2 className=\"input-label\">Options</h2>\n        {inputs.map((input, index) => {\n          return (\n            <Input\n              key={index}\n              name={input}\n              onChange={handleChange}\n              placeholder={`${input}:`}\n            />\n          );\n        })}\n        <div className=\"button-container\">\n          <button\n            onClick={() => {\n              inputs.push(\"D\");\n            }}\n            className=\"btn\"\n          >\n            <span className=\"plus\">+</span> Option\n          </button>\n          <Link to={{ pathname: \"/result\", state: options }}>\n            <input\n              type=\"submit\"\n              value=\"Answer!\"\n              className=\"submit-button btn\"\n            />\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Header from \"../components/header\";\n// import Input from \"../components/input\";\n\nimport \"../App.css\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Result(props) {\n  const options = props.location.state;\n  const items = [];\n  const randomProperty = function (obj) {\n    let keys = Object.keys(obj);\n    return obj[keys[(keys.length * Math.random()) << 0]];\n  };\n  const selectedItem = randomProperty(options);\n  for (const option in options) {\n    items.push(\n      <h3\n        key={option}\n        className={selectedItem === options[option] ? \"selected\" : \"\"}\n      >\n        {option}. {options[option]}\n      </h3>\n    );\n  }\n\n  return (\n    <div className=\"results-container\">\n      <Header />\n      <div>\n        <div className=\"result-text-container\">\n          <h1 className=\"result-header-dark\">Easy Decision Maker</h1>\n          <p>\n            When the decision is too hard or too simple use the Easy Decision\n            Maker\n          </p>\n        </div>\n        <div className=\"results-page-container\">\n          <div className=\"results\">\n            <h2 className=\"result-header\">Hello?</h2>\n            {items}\n          </div>\n          <div className=\"buttons\">\n            <div>\n              <Link to=\"/\">\n                <button className=\"btn button\">Ask Again?</button>\n              </Link>\n            </div>\n            <div>\n              <button className=\"btn button\">\n                Ask another random question?\n              </button>\n            </div>\n            <div>\n              <button\n                onClick={() => document.location.reload()}\n                className=\"btn button\"\n              >\n                Get another random answer?\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Home from \"../views/Home\";\nimport Result from \"../views/Result\";\n\nexport default function Main() {\n  return (\n    <main>\n      <Switch>\n        <Route exact path=\"/result\" component={Result} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </main>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Main from \"./routes/main\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Main />\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}